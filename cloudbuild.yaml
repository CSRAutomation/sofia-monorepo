steps:
# 0. Crear el repositorio en Artifact Registry si no existe.
# Esto hace que el pipeline sea idempotente y no requiera configuración manual.
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud artifacts repositories describe ${_SERVICE_NAME}-repo --location=us-central1 || \
    gcloud artifacts repositories create ${_SERVICE_NAME}-repo --repository-format=docker --location=us-central1 --description="Repo para el servicio ${_SERVICE_NAME}"

# 1. Construir la imagen de Docker para el servicio especificado.
# El nombre del servicio se pasa a través de la variable de sustitución _SERVICE_NAME.
- name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/${_SERVICE_NAME}-repo/${_SERVICE_NAME}:latest',
    # El -f especifica la ruta al Dockerfile del servicio.
    '-f', 'services/${_SERVICE_NAME}/Dockerfile',
    # El contexto del build es la raíz del monorepo, para poder acceder a libs/ en el futuro.
    '.'
  ]

# 2. Subir la imagen a Artifact Registry.
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/${_SERVICE_NAME}-repo/${_SERVICE_NAME}:latest']

# 3. Desplegar la nueva imagen en Cloud Run.
# El nombre del servicio de Cloud Run se construye a partir de _SERVICE_NAME.
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    DEPLOY_ARGS=""
    if [ "$_SERVICE_NAME" == "salesforce-api" ]; then
      echo "Servicio salesforce-api detectado. Añadiendo secretos de Salesforce."
      DEPLOY_ARGS="--set-secrets=SF_USERNAME=sf-prod-username:latest \
                   --set-secrets=SF_CONSUMER_KEY=sf-prod-consumer-key:latest \
                   --set-secrets=SF_DOMAIN=sf-prod-domain:latest \
                   --set-secrets=SF_PRIVATE_KEY_CONTENT=sf-prod-private-key:latest"
    elif [ "$_SERVICE_NAME" == "twilio-api" ]; then
      echo "Servicio twilio-api detectado. Añadiendo secretos y URL del agente."
      DEPLOY_ARGS="--set-secrets=TWILIO_ACCOUNT_SID=twilio-account-sid:latest \
                   --set-secrets=TWILIO_AUTH_TOKEN=twilio-auth-token:latest \
                   --set-secrets=TWILIO_PHONE_NUMBER=twilio-phone-number:latest"
      # Obtenemos dinámicamente la URL del servicio del agente Sofía.
      AGENT_URL=$$(gcloud run services describe agent-sofia-service --platform managed --region us-central1 --format 'value(status.url)' 2>/dev/null)
      if [ -z "$$AGENT_URL" ]; then
        echo "Error crítico: No se pudo obtener la URL del servicio 'agent-sofia-service'."
        exit 1
      fi
      echo "URL de Agent API encontrada: $$AGENT_URL"
      DEPLOY_ARGS="$$DEPLOY_ARGS --set-env-vars=AGENT_API_URL=$$AGENT_URL"
    elif [ "$_SERVICE_NAME" == "agent-sofia" ]; then
      echo "Servicio agent-sofia detectado. Configurando URL de la API de Salesforce."
      # Obtenemos dinámicamente la URL del servicio de la API de Salesforce.
      SALESFORCE_URL=$$(gcloud run services describe salesforce-api-service --platform managed --region us-central1 --format 'value(status.url)' 2>/dev/null)
      if [ -z "$$SALESFORCE_URL" ]; then
        echo "Error crítico: No se pudo obtener la URL del servicio 'salesforce-api-service'."
        exit 1
      fi
      echo "URL de Salesforce API encontrada: $$SALESFORCE_URL"
      DEPLOY_ARGS="--set-env-vars=SALESFORCE_API_URL=$$SALESFORCE_URL"
    fi

    gcloud run deploy ${_SERVICE_NAME}-service \
      --image=us-central1-docker.pkg.dev/$PROJECT_ID/${_SERVICE_NAME}-repo/${_SERVICE_NAME}:latest \
      --platform=managed \
      --region=us-central1 \
      --no-allow-unauthenticated \
      $$DEPLOY_ARGS

# Especifica la imagen que se acaba de construir.
images:
- 'us-central1-docker.pkg.dev/$PROJECT_ID/${_SERVICE_NAME}-repo/${_SERVICE_NAME}:latest'

options:
  logging: CLOUD_LOGGING_ONLY